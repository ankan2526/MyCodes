def dfs(p ,prev , lvl):

    level[p]=lvl

    parent[p][0]=prev

    for i in range(1,21):
        if(parent[p][i - 1] != -1):
            parent[p][i]= parent[ parent[p][i - 1] ][i - 1]


    for i in child[p]:
        if(i != prev):

            dfs(i , p , lvl + 1)

def node(p , dist):

    for i in range(20,-1,-1):

        if(dist >> i & 1):
            p=parent[p][i]

    return p


def lca(u,v):

    if(level[u] > level[v]):u,v=v,u

    dist=level[v] - level[u]
    for i in range(20,-1,-1):
        if(dist >> i & 1):
            v=parent[v][i]

    if(u==v):return u
    for i in range(20,-1,-1):
        if(parent[u][i] != parent[v][i]):
            u=parent[u][i]
            v=parent[v][i]

    return parent[u][0]
   
for T in range(int(input())):

    parent=[[-1 for i in range(21)] for j in range(n + 1)]
    level=[0 for i in range(n + 1)]
    dfs(1,-1,0)
    
    print(answer())