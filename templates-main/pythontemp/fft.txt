mod = 998244353
prime = 7 * 17 * 8192 * 1024 + 1
root, invr = [1] * 24, [1] * 24
while pow(root[23], prime // 2 // 7 // 17, prime) < prime - 1:
    root[23] += 1
invr[23] = pow(root[23], prime - 2, prime)
for e in reversed(range(23)):
    root[e] = pow(root[e+1], 2, prime)
    invr[e] = pow(invr[e+1], 2, prime)

def ntt(a, n, invert = False):

    j = 0
    for i in range(1, n):
        p2 = n // 2
        while j & p2 > 0:
            j ^= p2
            p2 //= 2
        j ^= p2
        if i < j:
            a[i], a[j] = a[j], a[i]

    d2 = 1
    e2 = 0
    while d2 < n:
        d1 = d2
        d2 *= 2
        e2 += 1
        wn = invr[e2] if invert else root[e2]

        for i in range(0, n, d2):
            w = 1
            for j in range(i, i+d1):
                u, v = a[j], a[j+d1] * w % prime
                u, v = u+v, u-v
                a[j] = u if u < prime else u - prime
                a[j+d1] = v if v >= 0 else v + prime
                w = w * wn % prime

    if invert:
        n1 = pow(n, prime - 2, prime)
        for i in range(n):
            a[i] = a[i] * n1 % prime

def mul(p1, p2):
    n1, n2, n = len(p1), len(p2), 1
    while(n < n1+n2):
        n *= 2
    p3 = p1 + [0] * (n-n1)
    p4 = p2 + [0] * (n-n2)
    ntt(p3, n)
    ntt(p4, n)
    for i in range(n):
        p4[i] = (p3[i] * p4[i]) % mod
    ntt(p4, n, True)
    #while(p4[-1] == 0): z = p4.pop()
    return p4